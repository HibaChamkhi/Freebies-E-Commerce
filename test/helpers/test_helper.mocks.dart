// Mocks generated by Mockito 5.4.4 from annotations
// in freebies_e_commerce/test/helpers/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;
import 'dart:convert' as _i28;
import 'dart:io' as _i10;
import 'dart:typed_data' as _i30;

import 'package:dartz/dartz.dart' as _i2;
import 'package:freebies_e_commerce/core/network/network_info.dart' as _i3;
import 'package:freebies_e_commerce/core/utils/error/failures.dart' as _i12;
import 'package:freebies_e_commerce/core/utils/resources/data_state.dart'
    as _i4;
import 'package:freebies_e_commerce/features/auth/data/data_source/supabase_data_source.dart'
    as _i7;
import 'package:freebies_e_commerce/features/auth/data/models/user.dart' as _i9;
import 'package:freebies_e_commerce/features/auth/data/repositories/auth_repository_impl.dart'
    as _i11;
import 'package:freebies_e_commerce/features/auth/domain/repositories/auth_repository.dart'
    as _i5;
import 'package:freebies_e_commerce/features/auth/domain/use_cases/logout_use_case.dart'
    as _i27;
import 'package:freebies_e_commerce/features/auth/domain/use_cases/sign_in_use_case.dart'
    as _i14;
import 'package:freebies_e_commerce/features/auth/domain/use_cases/sign_up_use_case.dart'
    as _i15;
import 'package:freebies_e_commerce/features/news/data/data_source/supabase_data_source.dart'
    as _i16;
import 'package:freebies_e_commerce/features/news/data/models/news.dart'
    as _i17;
import 'package:freebies_e_commerce/features/news/data/repositories/news_repository_impl.dart'
    as _i18;
import 'package:freebies_e_commerce/features/news/domain/repositories/news_repository.dart'
    as _i19;
import 'package:freebies_e_commerce/features/products/data/data_source/supabase_data_source.dart'
    as _i20;
import 'package:freebies_e_commerce/features/products/data/models/category/category.dart'
    as _i22;
import 'package:freebies_e_commerce/features/products/data/models/product/product.dart'
    as _i21;
import 'package:freebies_e_commerce/features/products/data/models/search/search.dart'
    as _i24;
import 'package:freebies_e_commerce/features/products/data/models/sub_category/sub_category.dart'
    as _i23;
import 'package:freebies_e_commerce/features/products/data/repositories/product_repository_impl.dart'
    as _i25;
import 'package:freebies_e_commerce/features/products/domain/repositories/product_repository.dart'
    as _i26;
import 'package:http/http.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i29;
import 'package:retrofit/dio.dart' as _i13;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUnit_0 extends _i1.SmartFake implements _i2.Unit {
  _FakeUnit_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNetworkInfo_1 extends _i1.SmartFake implements _i3.NetworkInfo {
  _FakeNetworkInfo_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_2<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDataState_3<T1> extends _i1.SmartFake implements _i4.DataState<T1> {
  _FakeDataState_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAuthRepository_4 extends _i1.SmartFake
    implements _i5.AuthRepository {
  _FakeAuthRepository_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_5 extends _i1.SmartFake implements _i6.Response {
  _FakeResponse_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamedResponse_6 extends _i1.SmartFake
    implements _i6.StreamedResponse {
  _FakeStreamedResponse_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AuthDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthDataSource extends _i1.Mock implements _i7.AuthDataSource {
  MockAuthDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i2.Unit> signUpUser(
    _i9.UserModel? user,
    _i10.File? imageFile,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #signUpUser,
          [
            user,
            imageFile,
          ],
        ),
        returnValue: _i8.Future<_i2.Unit>.value(_FakeUnit_0(
          this,
          Invocation.method(
            #signUpUser,
            [
              user,
              imageFile,
            ],
          ),
        )),
      ) as _i8.Future<_i2.Unit>);

  @override
  _i8.Future<_i2.Unit> signInUser(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInUser,
          [
            email,
            password,
          ],
        ),
        returnValue: _i8.Future<_i2.Unit>.value(_FakeUnit_0(
          this,
          Invocation.method(
            #signInUser,
            [
              email,
              password,
            ],
          ),
        )),
      ) as _i8.Future<_i2.Unit>);

  @override
  _i8.Future<_i2.Unit> logOut() => (super.noSuchMethod(
        Invocation.method(
          #logOut,
          [],
        ),
        returnValue: _i8.Future<_i2.Unit>.value(_FakeUnit_0(
          this,
          Invocation.method(
            #logOut,
            [],
          ),
        )),
      ) as _i8.Future<_i2.Unit>);
}

/// A class which mocks [AuthRepositoryImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepositoryImpl extends _i1.Mock
    implements _i11.AuthRepositoryImpl {
  MockAuthRepositoryImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.NetworkInfo get networkInfo => (super.noSuchMethod(
        Invocation.getter(#networkInfo),
        returnValue: _FakeNetworkInfo_1(
          this,
          Invocation.getter(#networkInfo),
        ),
      ) as _i3.NetworkInfo);

  @override
  _i8.Future<_i2.Either<_i12.Failure, _i2.Unit>> signUpUser(
    _i9.UserModel? user,
    _i10.File? imageFile,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #signUpUser,
          [
            user,
            imageFile,
          ],
        ),
        returnValue: _i8.Future<_i2.Either<_i12.Failure, _i2.Unit>>.value(
            _FakeEither_2<_i12.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #signUpUser,
            [
              user,
              imageFile,
            ],
          ),
        )),
      ) as _i8.Future<_i2.Either<_i12.Failure, _i2.Unit>>);

  @override
  _i8.Future<_i2.Either<_i12.Failure, _i2.Unit>> signInUser(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInUser,
          [
            email,
            password,
          ],
        ),
        returnValue: _i8.Future<_i2.Either<_i12.Failure, _i2.Unit>>.value(
            _FakeEither_2<_i12.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #signInUser,
            [
              email,
              password,
            ],
          ),
        )),
      ) as _i8.Future<_i2.Either<_i12.Failure, _i2.Unit>>);

  @override
  _i8.Future<_i2.Either<_i12.Failure, _i2.Unit>> logOut() =>
      (super.noSuchMethod(
        Invocation.method(
          #logOut,
          [],
        ),
        returnValue: _i8.Future<_i2.Either<_i12.Failure, _i2.Unit>>.value(
            _FakeEither_2<_i12.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #logOut,
            [],
          ),
        )),
      ) as _i8.Future<_i2.Either<_i12.Failure, _i2.Unit>>);

  @override
  _i8.Future<_i4.DataState<T?>> getStateOf<T>(
          {required _i8.Future<_i13.HttpResponse<T>> Function()? request}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getStateOf,
          [],
          {#request: request},
        ),
        returnValue: _i8.Future<_i4.DataState<T?>>.value(_FakeDataState_3<T?>(
          this,
          Invocation.method(
            #getStateOf,
            [],
            {#request: request},
          ),
        )),
      ) as _i8.Future<_i4.DataState<T?>>);
}

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i5.AuthRepository {
  MockAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i2.Either<_i12.Failure, _i2.Unit>> signUpUser(
    _i9.UserModel? user,
    _i10.File? imageFile,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #signUpUser,
          [
            user,
            imageFile,
          ],
        ),
        returnValue: _i8.Future<_i2.Either<_i12.Failure, _i2.Unit>>.value(
            _FakeEither_2<_i12.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #signUpUser,
            [
              user,
              imageFile,
            ],
          ),
        )),
      ) as _i8.Future<_i2.Either<_i12.Failure, _i2.Unit>>);

  @override
  _i8.Future<_i2.Either<_i12.Failure, _i2.Unit>> signInUser(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInUser,
          [
            email,
            password,
          ],
        ),
        returnValue: _i8.Future<_i2.Either<_i12.Failure, _i2.Unit>>.value(
            _FakeEither_2<_i12.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #signInUser,
            [
              email,
              password,
            ],
          ),
        )),
      ) as _i8.Future<_i2.Either<_i12.Failure, _i2.Unit>>);

  @override
  _i8.Future<_i2.Either<_i12.Failure, _i2.Unit>> logOut() =>
      (super.noSuchMethod(
        Invocation.method(
          #logOut,
          [],
        ),
        returnValue: _i8.Future<_i2.Either<_i12.Failure, _i2.Unit>>.value(
            _FakeEither_2<_i12.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #logOut,
            [],
          ),
        )),
      ) as _i8.Future<_i2.Either<_i12.Failure, _i2.Unit>>);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i3.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<bool> get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);
}

/// A class which mocks [SignInUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSignInUseCase extends _i1.Mock implements _i14.SignInUseCase {
  MockSignInUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.AuthRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeAuthRepository_4(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i5.AuthRepository);

  @override
  _i8.Future<_i2.Either<_i12.Failure, _i2.Unit>> call(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [
            email,
            password,
          ],
        ),
        returnValue: _i8.Future<_i2.Either<_i12.Failure, _i2.Unit>>.value(
            _FakeEither_2<_i12.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #call,
            [
              email,
              password,
            ],
          ),
        )),
      ) as _i8.Future<_i2.Either<_i12.Failure, _i2.Unit>>);
}

/// A class which mocks [SignUpUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSignUpUseCase extends _i1.Mock implements _i15.SignUpUseCase {
  MockSignUpUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.AuthRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeAuthRepository_4(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i5.AuthRepository);

  @override
  _i8.Future<_i2.Either<_i12.Failure, _i2.Unit>> call(
    _i9.UserModel? user,
    _i10.File? imageFile,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [
            user,
            imageFile,
          ],
        ),
        returnValue: _i8.Future<_i2.Either<_i12.Failure, _i2.Unit>>.value(
            _FakeEither_2<_i12.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #call,
            [
              user,
              imageFile,
            ],
          ),
        )),
      ) as _i8.Future<_i2.Either<_i12.Failure, _i2.Unit>>);
}

/// A class which mocks [NewsDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockNewsDataSource extends _i1.Mock implements _i16.NewsDataSource {
  MockNewsDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<List<_i17.NewsModel>> getAllNews() => (super.noSuchMethod(
        Invocation.method(
          #getAllNews,
          [],
        ),
        returnValue: _i8.Future<List<_i17.NewsModel>>.value(<_i17.NewsModel>[]),
      ) as _i8.Future<List<_i17.NewsModel>>);
}

/// A class which mocks [NewsRepositoryImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockNewsRepositoryImpl extends _i1.Mock
    implements _i18.NewsRepositoryImpl {
  MockNewsRepositoryImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.NetworkInfo get networkInfo => (super.noSuchMethod(
        Invocation.getter(#networkInfo),
        returnValue: _FakeNetworkInfo_1(
          this,
          Invocation.getter(#networkInfo),
        ),
      ) as _i3.NetworkInfo);

  @override
  _i8.Future<_i2.Either<_i12.Failure, List<_i17.NewsModel>>> getAllNews() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllNews,
          [],
        ),
        returnValue:
            _i8.Future<_i2.Either<_i12.Failure, List<_i17.NewsModel>>>.value(
                _FakeEither_2<_i12.Failure, List<_i17.NewsModel>>(
          this,
          Invocation.method(
            #getAllNews,
            [],
          ),
        )),
      ) as _i8.Future<_i2.Either<_i12.Failure, List<_i17.NewsModel>>>);

  @override
  _i8.Future<_i4.DataState<T?>> getStateOf<T>(
          {required _i8.Future<_i13.HttpResponse<T>> Function()? request}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getStateOf,
          [],
          {#request: request},
        ),
        returnValue: _i8.Future<_i4.DataState<T?>>.value(_FakeDataState_3<T?>(
          this,
          Invocation.method(
            #getStateOf,
            [],
            {#request: request},
          ),
        )),
      ) as _i8.Future<_i4.DataState<T?>>);
}

/// A class which mocks [NewsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockNewsRepository extends _i1.Mock implements _i19.NewsRepository {
  MockNewsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i2.Either<_i12.Failure, List<_i17.NewsModel>>> getAllNews() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllNews,
          [],
        ),
        returnValue:
            _i8.Future<_i2.Either<_i12.Failure, List<_i17.NewsModel>>>.value(
                _FakeEither_2<_i12.Failure, List<_i17.NewsModel>>(
          this,
          Invocation.method(
            #getAllNews,
            [],
          ),
        )),
      ) as _i8.Future<_i2.Either<_i12.Failure, List<_i17.NewsModel>>>);
}

/// A class which mocks [ProductDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductDataSource extends _i1.Mock implements _i20.ProductDataSource {
  MockProductDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<List<_i21.ProductModel>> getProducts(
    _i20.ProductFetchType? fetchType,
    String? searchQuery,
    String? categoryId,
    List<int>? subcategoryIds,
    _i20.ProductSortType? sortType,
    double? minPrice,
    double? maxPrice,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getProducts,
          [
            fetchType,
            searchQuery,
            categoryId,
            subcategoryIds,
            sortType,
            minPrice,
            maxPrice,
          ],
        ),
        returnValue:
            _i8.Future<List<_i21.ProductModel>>.value(<_i21.ProductModel>[]),
      ) as _i8.Future<List<_i21.ProductModel>>);

  @override
  _i8.Future<List<_i22.CategoryModel>> getCategories() => (super.noSuchMethod(
        Invocation.method(
          #getCategories,
          [],
        ),
        returnValue:
            _i8.Future<List<_i22.CategoryModel>>.value(<_i22.CategoryModel>[]),
      ) as _i8.Future<List<_i22.CategoryModel>>);

  @override
  _i8.Future<List<_i23.SubCategoryModel>> getSubCategories(
          String? categoryId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSubCategories,
          [categoryId],
        ),
        returnValue: _i8.Future<List<_i23.SubCategoryModel>>.value(
            <_i23.SubCategoryModel>[]),
      ) as _i8.Future<List<_i23.SubCategoryModel>>);

  @override
  _i8.Future<List<_i24.SearchModel>> getSearchValue() => (super.noSuchMethod(
        Invocation.method(
          #getSearchValue,
          [],
        ),
        returnValue:
            _i8.Future<List<_i24.SearchModel>>.value(<_i24.SearchModel>[]),
      ) as _i8.Future<List<_i24.SearchModel>>);

  @override
  _i8.Future<_i2.Unit> setSearchValue(_i24.SearchModel? searchValue) =>
      (super.noSuchMethod(
        Invocation.method(
          #setSearchValue,
          [searchValue],
        ),
        returnValue: _i8.Future<_i2.Unit>.value(_FakeUnit_0(
          this,
          Invocation.method(
            #setSearchValue,
            [searchValue],
          ),
        )),
      ) as _i8.Future<_i2.Unit>);

  @override
  _i8.Future<_i2.Unit> deleteSearchValue(int? searchId) => (super.noSuchMethod(
        Invocation.method(
          #deleteSearchValue,
          [searchId],
        ),
        returnValue: _i8.Future<_i2.Unit>.value(_FakeUnit_0(
          this,
          Invocation.method(
            #deleteSearchValue,
            [searchId],
          ),
        )),
      ) as _i8.Future<_i2.Unit>);
}

/// A class which mocks [ProductRepositoryImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductRepositoryImpl extends _i1.Mock
    implements _i25.ProductRepositoryImpl {
  MockProductRepositoryImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.NetworkInfo get networkInfo => (super.noSuchMethod(
        Invocation.getter(#networkInfo),
        returnValue: _FakeNetworkInfo_1(
          this,
          Invocation.getter(#networkInfo),
        ),
      ) as _i3.NetworkInfo);

  @override
  _i8.Future<_i2.Either<_i12.Failure, List<_i21.ProductModel>>> getProducts(
    _i20.ProductFetchType? fetchType,
    String? searchQuery,
    String? categoryId,
    List<int>? subcategoryIds,
    _i20.ProductSortType? sortType,
    double? minPrice,
    double? maxPrice,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getProducts,
          [
            fetchType,
            searchQuery,
            categoryId,
            subcategoryIds,
            sortType,
            minPrice,
            maxPrice,
          ],
        ),
        returnValue:
            _i8.Future<_i2.Either<_i12.Failure, List<_i21.ProductModel>>>.value(
                _FakeEither_2<_i12.Failure, List<_i21.ProductModel>>(
          this,
          Invocation.method(
            #getProducts,
            [
              fetchType,
              searchQuery,
              categoryId,
              subcategoryIds,
              sortType,
              minPrice,
              maxPrice,
            ],
          ),
        )),
      ) as _i8.Future<_i2.Either<_i12.Failure, List<_i21.ProductModel>>>);

  @override
  _i8.Future<_i2.Either<_i12.Failure, List<_i22.CategoryModel>>>
      getCategories() => (super.noSuchMethod(
            Invocation.method(
              #getCategories,
              [],
            ),
            returnValue: _i8.Future<
                    _i2.Either<_i12.Failure, List<_i22.CategoryModel>>>.value(
                _FakeEither_2<_i12.Failure, List<_i22.CategoryModel>>(
              this,
              Invocation.method(
                #getCategories,
                [],
              ),
            )),
          ) as _i8.Future<_i2.Either<_i12.Failure, List<_i22.CategoryModel>>>);

  @override
  _i8.Future<
      _i2.Either<_i12.Failure, List<_i23.SubCategoryModel>>> getSubCategories(
          String? categoryId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSubCategories,
          [categoryId],
        ),
        returnValue: _i8.Future<
                _i2.Either<_i12.Failure, List<_i23.SubCategoryModel>>>.value(
            _FakeEither_2<_i12.Failure, List<_i23.SubCategoryModel>>(
          this,
          Invocation.method(
            #getSubCategories,
            [categoryId],
          ),
        )),
      ) as _i8.Future<_i2.Either<_i12.Failure, List<_i23.SubCategoryModel>>>);

  @override
  _i8.Future<_i2.Either<_i12.Failure, _i2.Unit>> deleteSearchValue(
          int? searchId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteSearchValue,
          [searchId],
        ),
        returnValue: _i8.Future<_i2.Either<_i12.Failure, _i2.Unit>>.value(
            _FakeEither_2<_i12.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #deleteSearchValue,
            [searchId],
          ),
        )),
      ) as _i8.Future<_i2.Either<_i12.Failure, _i2.Unit>>);

  @override
  _i8.Future<_i2.Either<_i12.Failure, List<_i24.SearchModel>>>
      getSearchValue() => (super.noSuchMethod(
            Invocation.method(
              #getSearchValue,
              [],
            ),
            returnValue: _i8
                .Future<_i2.Either<_i12.Failure, List<_i24.SearchModel>>>.value(
                _FakeEither_2<_i12.Failure, List<_i24.SearchModel>>(
              this,
              Invocation.method(
                #getSearchValue,
                [],
              ),
            )),
          ) as _i8.Future<_i2.Either<_i12.Failure, List<_i24.SearchModel>>>);

  @override
  _i8.Future<_i2.Either<_i12.Failure, _i2.Unit>> setSearchValue(
          _i24.SearchModel? searchValue) =>
      (super.noSuchMethod(
        Invocation.method(
          #setSearchValue,
          [searchValue],
        ),
        returnValue: _i8.Future<_i2.Either<_i12.Failure, _i2.Unit>>.value(
            _FakeEither_2<_i12.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #setSearchValue,
            [searchValue],
          ),
        )),
      ) as _i8.Future<_i2.Either<_i12.Failure, _i2.Unit>>);

  @override
  _i8.Future<_i4.DataState<T?>> getStateOf<T>(
          {required _i8.Future<_i13.HttpResponse<T>> Function()? request}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getStateOf,
          [],
          {#request: request},
        ),
        returnValue: _i8.Future<_i4.DataState<T?>>.value(_FakeDataState_3<T?>(
          this,
          Invocation.method(
            #getStateOf,
            [],
            {#request: request},
          ),
        )),
      ) as _i8.Future<_i4.DataState<T?>>);
}

/// A class which mocks [ProductRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductRepository extends _i1.Mock implements _i26.ProductRepository {
  MockProductRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i2.Either<_i12.Failure, List<_i21.ProductModel>>> getProducts(
    _i20.ProductFetchType? fetchType,
    String? searchQuery,
    String? categoryId,
    List<int>? subcategoryIds,
    _i20.ProductSortType? sortType,
    double? minPrice,
    double? maxPrice,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getProducts,
          [
            fetchType,
            searchQuery,
            categoryId,
            subcategoryIds,
            sortType,
            minPrice,
            maxPrice,
          ],
        ),
        returnValue:
            _i8.Future<_i2.Either<_i12.Failure, List<_i21.ProductModel>>>.value(
                _FakeEither_2<_i12.Failure, List<_i21.ProductModel>>(
          this,
          Invocation.method(
            #getProducts,
            [
              fetchType,
              searchQuery,
              categoryId,
              subcategoryIds,
              sortType,
              minPrice,
              maxPrice,
            ],
          ),
        )),
      ) as _i8.Future<_i2.Either<_i12.Failure, List<_i21.ProductModel>>>);

  @override
  _i8.Future<_i2.Either<_i12.Failure, List<_i22.CategoryModel>>>
      getCategories() => (super.noSuchMethod(
            Invocation.method(
              #getCategories,
              [],
            ),
            returnValue: _i8.Future<
                    _i2.Either<_i12.Failure, List<_i22.CategoryModel>>>.value(
                _FakeEither_2<_i12.Failure, List<_i22.CategoryModel>>(
              this,
              Invocation.method(
                #getCategories,
                [],
              ),
            )),
          ) as _i8.Future<_i2.Either<_i12.Failure, List<_i22.CategoryModel>>>);

  @override
  _i8.Future<
      _i2.Either<_i12.Failure, List<_i23.SubCategoryModel>>> getSubCategories(
          String? categoryId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSubCategories,
          [categoryId],
        ),
        returnValue: _i8.Future<
                _i2.Either<_i12.Failure, List<_i23.SubCategoryModel>>>.value(
            _FakeEither_2<_i12.Failure, List<_i23.SubCategoryModel>>(
          this,
          Invocation.method(
            #getSubCategories,
            [categoryId],
          ),
        )),
      ) as _i8.Future<_i2.Either<_i12.Failure, List<_i23.SubCategoryModel>>>);

  @override
  _i8.Future<_i2.Either<_i12.Failure, List<_i24.SearchModel>>>
      getSearchValue() => (super.noSuchMethod(
            Invocation.method(
              #getSearchValue,
              [],
            ),
            returnValue: _i8
                .Future<_i2.Either<_i12.Failure, List<_i24.SearchModel>>>.value(
                _FakeEither_2<_i12.Failure, List<_i24.SearchModel>>(
              this,
              Invocation.method(
                #getSearchValue,
                [],
              ),
            )),
          ) as _i8.Future<_i2.Either<_i12.Failure, List<_i24.SearchModel>>>);

  @override
  _i8.Future<_i2.Either<_i12.Failure, _i2.Unit>> setSearchValue(
          _i24.SearchModel? searchValue) =>
      (super.noSuchMethod(
        Invocation.method(
          #setSearchValue,
          [searchValue],
        ),
        returnValue: _i8.Future<_i2.Either<_i12.Failure, _i2.Unit>>.value(
            _FakeEither_2<_i12.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #setSearchValue,
            [searchValue],
          ),
        )),
      ) as _i8.Future<_i2.Either<_i12.Failure, _i2.Unit>>);

  @override
  _i8.Future<_i2.Either<_i12.Failure, _i2.Unit>> deleteSearchValue(
          int? searchId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteSearchValue,
          [searchId],
        ),
        returnValue: _i8.Future<_i2.Either<_i12.Failure, _i2.Unit>>.value(
            _FakeEither_2<_i12.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #deleteSearchValue,
            [searchId],
          ),
        )),
      ) as _i8.Future<_i2.Either<_i12.Failure, _i2.Unit>>);
}

/// A class which mocks [LogOutUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockLogOutUseCase extends _i1.Mock implements _i27.LogOutUseCase {
  MockLogOutUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.AuthRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeAuthRepository_4(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i5.AuthRepository);

  @override
  _i8.Future<_i2.Either<_i12.Failure, _i2.Unit>> call() => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i8.Future<_i2.Either<_i12.Failure, _i2.Unit>>.value(
            _FakeEither_2<_i12.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #call,
            [],
          ),
        )),
      ) as _i8.Future<_i2.Either<_i12.Failure, _i2.Unit>>);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClient extends _i1.Mock implements _i6.Client {
  MockHttpClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i6.Response> head(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [url],
          {#headers: headers},
        ),
        returnValue: _i8.Future<_i6.Response>.value(_FakeResponse_5(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i8.Future<_i6.Response>);

  @override
  _i8.Future<_i6.Response> get(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {#headers: headers},
        ),
        returnValue: _i8.Future<_i6.Response>.value(_FakeResponse_5(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i8.Future<_i6.Response>);

  @override
  _i8.Future<_i6.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i28.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i8.Future<_i6.Response>.value(_FakeResponse_5(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i8.Future<_i6.Response>);

  @override
  _i8.Future<_i6.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i28.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i8.Future<_i6.Response>.value(_FakeResponse_5(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i8.Future<_i6.Response>);

  @override
  _i8.Future<_i6.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i28.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i8.Future<_i6.Response>.value(_FakeResponse_5(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i8.Future<_i6.Response>);

  @override
  _i8.Future<_i6.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i28.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i8.Future<_i6.Response>.value(_FakeResponse_5(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i8.Future<_i6.Response>);

  @override
  _i8.Future<String> read(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [url],
          {#headers: headers},
        ),
        returnValue: _i8.Future<String>.value(_i29.dummyValue<String>(
          this,
          Invocation.method(
            #read,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i8.Future<String>);

  @override
  _i8.Future<_i30.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readBytes,
          [url],
          {#headers: headers},
        ),
        returnValue: _i8.Future<_i30.Uint8List>.value(_i30.Uint8List(0)),
      ) as _i8.Future<_i30.Uint8List>);

  @override
  _i8.Future<_i6.StreamedResponse> send(_i6.BaseRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [request],
        ),
        returnValue:
            _i8.Future<_i6.StreamedResponse>.value(_FakeStreamedResponse_6(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
      ) as _i8.Future<_i6.StreamedResponse>);

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
